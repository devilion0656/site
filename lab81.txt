<input type=button value=Solve onclick=solve()> 
<div id=solution> 
Solution area 
</div>/body> 
<script> 
function solve() 
{
  let a = document.getElementById('a'); 
  let b= document.getElementById('b'); 
  let c= document.getElementById('b'); 
let err ='';
if (i sNa

{
   err ='a is not a number."; 
   a.focus(); 
   alert('please enter a number'); 
}
else if (isNaN(b.value)) 
{
   err='b is not a number."; 
   b.focus(); 
   alert(('please enter a number');
}
else if (isNaN(c.value))
{ 
   err='c is not a number.'; 
   C.focus(); 
   alert('please enter a number'); 
}
else 
{ 
 
   a = parseFloat(a.value); 
   b= parseFloat(b.value); 
   c= parseFloat(c.value);
}
if (c === 0) 
{
   err= "any x solves the equation"; 
}
else
{ 
   err ="there is no solution"; 
  }  
}
else 
{
} 
else 
{
err ='x='+(-c/b); 
else 
} 
let delta =b**2-4*a*c; 
if (delta >#)  
err ="x1='+(-b+ Math.sqrt(detla)/2/a)
}
else if (delta ==0) 
{
err="x="+(-b/2/a); else 
   err ="x1='+((-b +Math.sgrt(-delta)/2/a) . a.sy +"x2="+((-b-
Math.sart(deIta))12/a);


	area = document.getElementById('solution');
	area.innerHTML = err;
	area.appendChild(document.creatTestNode(err));



JavaScript object

similar to C's stucture
python's dictionary
PHP associative array
java's map
C++'s class/map/hashmap

extension of array :
array is map from number -> value


object: any -->any type
key-->value
object is collection of key-value-pairs


syntax:
let x = {};
let y = {a:1, b:2, c:100};//similar to CSS
let z ={"a c":1,"bz":2.5,"c":100};
attribute = field = key
It is not necessary for all value to have the same type.
Opject can be inhomogeneous


var studentrecord ={
id:"D1003435"
name:"John Smith",
register:function(i,n)
{
	studentrecord.id =i;
	studentrecord.name =n;
}
};
studentrecord.register(1."abc");

studentrecord also can be viewd as a family name
using family name is to promote software reusability
by reducing the chance of name collision

studentrecord.keys
studentrecord.values
studentrecord.entries4

for loop:
for (let key in studentrecord)// iteration/travelsal/going through
{
	console.log(studentrecord.key);
	console.log(studentrecord[key]);
}

for (let value of studentrecord)//iteration/traversal/going through


